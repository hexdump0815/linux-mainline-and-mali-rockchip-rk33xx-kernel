see: https://github.com/megous/linux/commit/64487a912fbe005b94d7d9e71f7bdc87bffce9ae
and: https://github.com/megous/linux/commit/d062b41566c3ffca3a22ce2467c020716ceb2fab
and: https://github.com/megous/linux/commit/760642c16ac37ad786d557fa9ec9150c06b3cf3c
and: https://github.com/megous/linux/commit/b88851a02ec3fe58118dc19fb6f639036491484b

From 64487a912fbe005b94d7d9e71f7bdc87bffce9ae Mon Sep 17 00:00:00 2001
From: Ondrej Jirman <megi@xff.cz>
Date: Mon, 6 Mar 2023 03:46:09 +0100
Subject: [PATCH] 8723cs: Forward port to Linux 6.3

Signed-off-by: Ondrej Jirman <megi@xff.cz>
---
 drivers/staging/rtl8723cs/os_dep/linux/ioctl_cfg80211.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/drivers/staging/rtl8723cs/os_dep/linux/ioctl_cfg80211.c b/drivers/staging/rtl8723cs/os_dep/linux/ioctl_cfg80211.c
index f50a9abaad89fe..a92ec4d3703688 100644
--- a/drivers/staging/rtl8723cs/os_dep/linux/ioctl_cfg80211.c
+++ b/drivers/staging/rtl8723cs/os_dep/linux/ioctl_cfg80211.c
@@ -452,14 +452,14 @@ u8 rtw_cfg80211_ch_switch_notify(_adapter *adapter, u8 ch, u8 bw, u8 offset,
 		goto exit;
 
 	if (started) {
-		cfg80211_ch_switch_started_notify(adapter->pnetdev, &chdef, 0, 0, false);
+		cfg80211_ch_switch_started_notify(adapter->pnetdev, &chdef, 0, 0, false, 0);
 		goto exit;
 	}
 
 	if (!rtw_cfg80211_allow_ch_switch_notify(adapter))
 		goto exit;
 
-	cfg80211_ch_switch_notify(adapter->pnetdev, &chdef, 0);
+	cfg80211_ch_switch_notify(adapter->pnetdev, &chdef, 0, 0);
 
 exit:
 	return ret;
From d062b41566c3ffca3a22ce2467c020716ceb2fab Mon Sep 17 00:00:00 2001
From: Ondrej Jirman <megi@xff.cz>
Date: Thu, 30 Mar 2023 13:41:47 +0200
Subject: [PATCH] 8723cs: Add support for set_cqm_rssi_config to help switch AP
 when signal is low

Based on: https://raw.githubusercontent.com/balena-os/balena-jetson/4c0f84d2456232d8c8e6cdc12c18ea4b85985053/layers/meta-balena-jetson/recipes-kernel/linux/linux-tegra/0017-rtl8822ce-os_dep-Fix-rssi-monitor-event-behavior.patch

And ported to Linux 6.3.

Signed-off-by: Ondrej Jirman <megi@xff.cz>
---
 drivers/staging/rtl8723cs/Makefile            |  1 +
 .../rtl8723cs/os_dep/linux/ioctl_cfg80211.c   | 18 +++++++++
 .../rtl8723cs/os_dep/linux/rtw_cfgvendor.c    | 39 ++++++++++++++++++-
 3 files changed, 57 insertions(+), 1 deletion(-)

diff --git a/drivers/staging/rtl8723cs/Makefile b/drivers/staging/rtl8723cs/Makefile
index a709256357f986..7b630a48af642b 100644
--- a/drivers/staging/rtl8723cs/Makefile
+++ b/drivers/staging/rtl8723cs/Makefile
@@ -22,6 +22,7 @@ EXTRA_CFLAGS += -Wno-date-time	# Fix compile error && warning on gcc 4.9 and lat
 endif
 
 EXTRA_CFLAGS += -I$(srctree)/$(src)/include
+EXTRA_CFLAGS += -DCONFIG_RTW_CFGVENDOR_RSSIMONITOR -DCONFIG_RTW_CFGVENDOR_CQM_THRESHOLD_EVT_LOW
 
 EXTRA_LDFLAGS += --strip-debug
 
diff --git a/drivers/staging/rtl8723cs/os_dep/linux/ioctl_cfg80211.c b/drivers/staging/rtl8723cs/os_dep/linux/ioctl_cfg80211.c
index a92ec4d3703688..4067369e65f1ca 100644
--- a/drivers/staging/rtl8723cs/os_dep/linux/ioctl_cfg80211.c
+++ b/drivers/staging/rtl8723cs/os_dep/linux/ioctl_cfg80211.c
@@ -3516,6 +3516,21 @@ static void cfg80211_rtw_abort_scan(struct wiphy *wiphy,
 }
 #endif
 
+static int cfg80211_rtw_set_cqm_rssi_config(struct wiphy *wiphy,
+                                            struct net_device *dev,
+	                               	    s32 rssi_thold,
+				            u32 rssi_hyst)
+{
+	_adapter *padapter = GET_PRIMARY_ADAPTER(wiphy_to_adapter(wiphy));
+        struct rtw_wdev_priv *pwdev_priv = adapter_wdev_data(padapter);
+
+	pwdev_priv->rssi_monitor_max = 0;
+	pwdev_priv->rssi_monitor_min = rssi_thold;
+        pwdev_priv->rssi_monitor_enable = 1;
+        RTW_INFO("%s, rssi_thold=%d, rssi_hyst=%d\n", __func__, rssi_thold, rssi_hyst);
+        return 0;
+}
+
 static int cfg80211_rtw_set_wiphy_params(struct wiphy *wiphy, u32 changed)
 {
 #if 0
@@ -10448,6 +10463,9 @@ static struct cfg80211_ops rtw_cfg80211_ops = {
     || defined(CONFIG_KERNEL_PATCH_EXTERNAL_AUTH)
 	.external_auth = cfg80211_rtw_external_auth,
 #endif
+#ifdef CONFIG_RTW_CFGVENDOR_RSSIMONITOR
+        .set_cqm_rssi_config = cfg80211_rtw_set_cqm_rssi_config,
+#endif
 };
 
 struct wiphy *rtw_wiphy_alloc(_adapter *padapter, struct device *dev)
diff --git a/drivers/staging/rtl8723cs/os_dep/linux/rtw_cfgvendor.c b/drivers/staging/rtl8723cs/os_dep/linux/rtw_cfgvendor.c
index 6daa9e2d6dd1e2..5095272414c596 100644
--- a/drivers/staging/rtl8723cs/os_dep/linux/rtw_cfgvendor.c
+++ b/drivers/staging/rtl8723cs/os_dep/linux/rtw_cfgvendor.c
@@ -36,6 +36,7 @@
 */
 
 #include <net/rtnetlink.h>
+#include "rtw_cfgvendor.h"
 
 #ifndef MIN
 #define MIN(x,y) (((x) < (y)) ? (x) : (y))
@@ -1345,17 +1346,51 @@ void rtw_cfgvendor_rssi_monitor_evt(_adapter *padapter) {
 	struct sk_buff *skb;
 	u32 tot_len = NLMSG_DEFAULT_SIZE;
 	gfp_t kflags;
+#ifndef CONFIG_RTW_CFGVENDOR_CQM_THRESHOLD_EVT_LOW
         rssi_monitor_evt data ;
+#endif
         s8 rssi = precvpriv->rssi;
 
         if (pwdev_priv->rssi_monitor_enable == 0 || check_fwstate(pmlmepriv, WIFI_ASOC_STATE) != _TRUE)
                 return;
 
-        if (rssi < pwdev_priv->rssi_monitor_max || rssi > pwdev_priv->rssi_monitor_min)
+	#ifdef CONFIG_RTW_CFGVENDOR_CQM_THRESHOLD_EVT_LOW
+        /* Updated this function to return NL80211_CQM_RSSI_THRESHOLD_EVENT_LOW, which is the
+           type of event expected by wpa_supplicant when the rssi value drops below threshold.
+           This type of event triggers a scan, and is generally followed by a roam to an AP
+           with stronger signal. */
+        if (rssi < pwdev_priv->rssi_monitor_max && rssi > pwdev_priv->rssi_monitor_min)
                 return;
 
 	kflags = in_atomic() ? GFP_ATOMIC : GFP_KERNEL;
 
+	cfg80211_cqm_rssi_notify(wdev->netdev, NL80211_CQM_RSSI_THRESHOLD_EVENT_LOW, rssi, kflags);
+
+	/* After a cqm rssi threshold event, disable event triggering to:
+	     1. prevent constant event generation.
+	     2. allow the wpa_supplicant to drive this process based on its bgscan interval settings. */
+	pwdev_priv->rssi_monitor_enable = 0;
+
+	return;
+
+        #else
+	/* The original code calls rtw_cfg80211_vendor_event_alloc() to allocate an skb to
+           send a "vendor event" to user space.  The third value passed to
+           rtw_cfg80211_vendor_event_alloc() should be "event_idx: index of the vendor event
+           in the wiphy's vendor_events", but rather than passing the index of the vendor event
+           in the vendor_events array, the code incorrectly passes the enum value 13 of the
+           GOOGLE_RSSI_MONITOR_EVENT vendor event.  This value is larger than the size of the
+           vendor_events array and results in a return value of NULL rather than the address of
+           an allocated skb buffer.  Since the skb is not allocated,  no vendor event is actually
+           reported.  Modifying this code to send the proper index of the vendor_event does not
+           improve things, since this vendor defined event type is not handled by wpa_supplicant
+           anyway. */ 
+
+        if (rssi < pwdev_priv->rssi_monitor_max || rssi > pwdev_priv->rssi_monitor_min)
+               return;
+
+	kflags = in_atomic() ? GFP_ATOMIC : GFP_KERNEL;
+
 	/* Alloc the SKB for vendor_event */
 	skb = rtw_cfg80211_vendor_event_alloc(wiphy, wdev, tot_len, GOOGLE_RSSI_MONITOR_EVENT, kflags);
 	if (!skb) {
@@ -1373,6 +1408,8 @@ void rtw_cfgvendor_rssi_monitor_evt(_adapter *padapter) {
 	rtw_cfg80211_vendor_event(skb, kflags);
 exit:
 	return;
+
+        #endif /* original code */
 }
 #endif /* CONFIG_RTW_CFGVENDOR_RSSIMONITR */
 
From 760642c16ac37ad786d557fa9ec9150c06b3cf3c Mon Sep 17 00:00:00 2001
From: Ondrej Jirman <megi@xff.cz>
Date: Thu, 30 Mar 2023 15:45:50 +0200
Subject: [PATCH] 8723cs: Fix the RSSI monitor implementation

We need to send both signal LOW and signal HIGH events.

While we're at it, implement hystheresis, too.

Signed-off-by: Ondrej Jirman <megi@xff.cz>
---
 .../rtl8723cs/os_dep/linux/ioctl_cfg80211.c   |  17 ++-
 .../rtl8723cs/os_dep/linux/ioctl_cfg80211.h   |   9 +-
 .../rtl8723cs/os_dep/linux/rtw_cfgvendor.c    | 139 ++++--------------
 3 files changed, 44 insertions(+), 121 deletions(-)

diff --git a/drivers/staging/rtl8723cs/os_dep/linux/ioctl_cfg80211.c b/drivers/staging/rtl8723cs/os_dep/linux/ioctl_cfg80211.c
index 4067369e65f1ca..7eea58711252d6 100644
--- a/drivers/staging/rtl8723cs/os_dep/linux/ioctl_cfg80211.c
+++ b/drivers/staging/rtl8723cs/os_dep/linux/ioctl_cfg80211.c
@@ -3405,7 +3405,7 @@ static int cfg80211_rtw_scan(struct wiphy *wiphy
 	    && rtw_mi_busy_traffic_check(padapter)) {
 		RTW_WARN(FUNC_ADPT_FMT ": scan abort!! BusyTraffic\n",
 			 FUNC_ADPT_ARG(padapter));
- 		need_indicate_scan_done = _TRUE;
+		need_indicate_scan_done = _TRUE;
 		goto check_need_indicate_scan_done;
 	}
 #endif /* RTW_BUSY_DENY_SCAN */
@@ -3518,14 +3518,15 @@ static void cfg80211_rtw_abort_scan(struct wiphy *wiphy,
 
 static int cfg80211_rtw_set_cqm_rssi_config(struct wiphy *wiphy,
                                             struct net_device *dev,
-	                               	    s32 rssi_thold,
-				            u32 rssi_hyst)
+					    s32 rssi_thold,
+					    u32 rssi_hyst)
 {
 	_adapter *padapter = GET_PRIMARY_ADAPTER(wiphy_to_adapter(wiphy));
         struct rtw_wdev_priv *pwdev_priv = adapter_wdev_data(padapter);
 
-	pwdev_priv->rssi_monitor_max = 0;
-	pwdev_priv->rssi_monitor_min = rssi_thold;
+	pwdev_priv->rssi_monitor_th = rssi_thold;
+	pwdev_priv->rssi_monitor_hyst = rssi_hyst;
+	pwdev_priv->rssi_monitor_state = 1;
         pwdev_priv->rssi_monitor_enable = 1;
         RTW_INFO("%s, rssi_thold=%d, rssi_hyst=%d\n", __func__, rssi_thold, rssi_hyst);
         return 0;
@@ -10599,12 +10600,12 @@ int rtw_wdev_alloc(_adapter *padapter, struct wiphy *wiphy)
 #endif
 
 #ifdef CONFIG_RTW_CFGVENDOR_RSSIMONITOR
+	pwdev_priv->rssi_monitor_th = 0;
+	pwdev_priv->rssi_monitor_hyst = 0;
+	pwdev_priv->rssi_monitor_state = 1;
         pwdev_priv->rssi_monitor_enable = 0;
-        pwdev_priv->rssi_monitor_max = 0;
-        pwdev_priv->rssi_monitor_min = 0;
 #endif
 
-
 exit:
 	return ret;
 }
diff --git a/drivers/staging/rtl8723cs/os_dep/linux/ioctl_cfg80211.h b/drivers/staging/rtl8723cs/os_dep/linux/ioctl_cfg80211.h
index 22018caa33fe26..a2b4be24981457 100644
--- a/drivers/staging/rtl8723cs/os_dep/linux/ioctl_cfg80211.h
+++ b/drivers/staging/rtl8723cs/os_dep/linux/ioctl_cfg80211.h
@@ -191,9 +191,12 @@ struct rtw_wdev_priv {
 #endif
 
 #ifdef CONFIG_RTW_CFGVENDOR_RSSIMONITOR
-        s8 rssi_monitor_max;
-        s8 rssi_monitor_min;
-        u8 rssi_monitor_enable;
+        s32 rssi_monitor_th;
+        u32 rssi_monitor_hyst;
+        s32 rssi_monitor_state; //  0 = midpoint
+				// -1 = last crossed low threshold
+				//  1 = last crossed high threshold
+        bool rssi_monitor_enable;
 #endif
 
 };
diff --git a/drivers/staging/rtl8723cs/os_dep/linux/rtw_cfgvendor.c b/drivers/staging/rtl8723cs/os_dep/linux/rtw_cfgvendor.c
index 5095272414c596..ea7c81e291f1af 100644
--- a/drivers/staging/rtl8723cs/os_dep/linux/rtw_cfgvendor.c
+++ b/drivers/staging/rtl8723cs/os_dep/linux/rtw_cfgvendor.c
@@ -1305,111 +1305,43 @@ static int rtw_cfgvendor_lstats_clear_info(struct wiphy *wiphy,
 }
 #endif /* CONFIG_RTW_CFGVENDOR_LLSTATS */
 #ifdef CONFIG_RTW_CFGVENDOR_RSSIMONITOR
-static int rtw_cfgvendor_set_rssi_monitor(struct wiphy *wiphy,
-	struct wireless_dev *wdev, const void  *data, int len)
-{
-        _adapter *padapter = GET_PRIMARY_ADAPTER(wiphy_to_adapter(wiphy));
-        struct rtw_wdev_priv *pwdev_priv = adapter_wdev_data(padapter);
-
-        struct recv_priv *precvpriv = &padapter->recvpriv;
-	int err = 0, rem, type;
-        const struct nlattr *iter;
-
-        RTW_DBG(FUNC_NDEV_FMT" %s\n", FUNC_NDEV_ARG(wdev_to_ndev(wdev)), (char*)data);
-
-	nla_for_each_attr(iter, data, len, rem) {
-		type = nla_type(iter);
-
-		switch (type) {
-        		case RSSI_MONITOR_ATTRIBUTE_MAX_RSSI:
-                                pwdev_priv->rssi_monitor_max = (s8)nla_get_u32(iter);;
-	        		break;
-		        case RSSI_MONITOR_ATTRIBUTE_MIN_RSSI:
-                                pwdev_priv->rssi_monitor_min = (s8)nla_get_u32(iter);
-			        break;
-        		case RSSI_MONITOR_ATTRIBUTE_START:
-                                pwdev_priv->rssi_monitor_enable = (u8)nla_get_u32(iter);
-	        		break;
-		}
-	}
-
-	return err;
-}
-
 void rtw_cfgvendor_rssi_monitor_evt(_adapter *padapter) {
-	struct wireless_dev *wdev =  padapter->rtw_wdev;
-	struct wiphy *wiphy= wdev->wiphy;
-        struct recv_priv *precvpriv = &padapter->recvpriv;
-	struct	mlme_priv	*pmlmepriv = &(padapter->mlmepriv);
-	struct	wlan_network	*pcur_network = &pmlmepriv->cur_network;
+	gfp_t kflags = in_atomic() ? GFP_ATOMIC : GFP_KERNEL;
+	struct wireless_dev *wdev = padapter->rtw_wdev;
+	//struct wiphy *wiphy = wdev->wiphy;
+	struct mlme_priv *pmlmepriv = &padapter->mlmepriv;
+	//struct wlan_network *pcur_network = &pmlmepriv->cur_network;
         struct rtw_wdev_priv *pwdev_priv = adapter_wdev_data(padapter);
-	struct sk_buff *skb;
-	u32 tot_len = NLMSG_DEFAULT_SIZE;
-	gfp_t kflags;
-#ifndef CONFIG_RTW_CFGVENDOR_CQM_THRESHOLD_EVT_LOW
-        rssi_monitor_evt data ;
-#endif
-        s8 rssi = precvpriv->rssi;
-
-        if (pwdev_priv->rssi_monitor_enable == 0 || check_fwstate(pmlmepriv, WIFI_ASOC_STATE) != _TRUE)
-                return;
+        struct recv_priv *precvpriv = &padapter->recvpriv;
+        s32 rssi = precvpriv->rssi;
 
-	#ifdef CONFIG_RTW_CFGVENDOR_CQM_THRESHOLD_EVT_LOW
-        /* Updated this function to return NL80211_CQM_RSSI_THRESHOLD_EVENT_LOW, which is the
-           type of event expected by wpa_supplicant when the rssi value drops below threshold.
-           This type of event triggers a scan, and is generally followed by a roam to an AP
-           with stronger signal. */
-        if (rssi < pwdev_priv->rssi_monitor_max && rssi > pwdev_priv->rssi_monitor_min)
+	/*
+	 * Nothing to monitor.
+	 */
+        if (!pwdev_priv->rssi_monitor_enable || check_fwstate(pmlmepriv, WIFI_ASOC_STATE) != _TRUE)
                 return;
 
-	kflags = in_atomic() ? GFP_ATOMIC : GFP_KERNEL;
-
-	cfg80211_cqm_rssi_notify(wdev->netdev, NL80211_CQM_RSSI_THRESHOLD_EVENT_LOW, rssi, kflags);
-
-	/* After a cqm rssi threshold event, disable event triggering to:
-	     1. prevent constant event generation.
-	     2. allow the wpa_supplicant to drive this process based on its bgscan interval settings. */
-	pwdev_priv->rssi_monitor_enable = 0;
-
-	return;
-
-        #else
-	/* The original code calls rtw_cfg80211_vendor_event_alloc() to allocate an skb to
-           send a "vendor event" to user space.  The third value passed to
-           rtw_cfg80211_vendor_event_alloc() should be "event_idx: index of the vendor event
-           in the wiphy's vendor_events", but rather than passing the index of the vendor event
-           in the vendor_events array, the code incorrectly passes the enum value 13 of the
-           GOOGLE_RSSI_MONITOR_EVENT vendor event.  This value is larger than the size of the
-           vendor_events array and results in a return value of NULL rather than the address of
-           an allocated skb buffer.  Since the skb is not allocated,  no vendor event is actually
-           reported.  Modifying this code to send the proper index of the vendor_event does not
-           improve things, since this vendor defined event type is not handled by wpa_supplicant
-           anyway. */ 
-
-        if (rssi < pwdev_priv->rssi_monitor_max || rssi > pwdev_priv->rssi_monitor_min)
-               return;
-
-	kflags = in_atomic() ? GFP_ATOMIC : GFP_KERNEL;
+	//pr_info("got event rssi=%d\n", rssi);
 
-	/* Alloc the SKB for vendor_event */
-	skb = rtw_cfg80211_vendor_event_alloc(wiphy, wdev, tot_len, GOOGLE_RSSI_MONITOR_EVENT, kflags);
-	if (!skb) {
-		goto exit;
+	/*
+	 * If last event was NL80211_CQM_RSSI_THRESHOLD_EVENT_HIGH and RSSI is
+	 * lower than the threshold, raise the signal LOW event.
+	 */
+	if (pwdev_priv->rssi_monitor_state >= 0 && rssi <= pwdev_priv->rssi_monitor_th - pwdev_priv->rssi_monitor_hyst) {
+		cfg80211_cqm_rssi_notify(wdev->netdev, NL80211_CQM_RSSI_THRESHOLD_EVENT_LOW, rssi, kflags);
+		pwdev_priv->rssi_monitor_state = -1;
+		//pr_info("rssi <= %d\n", pwdev_priv->rssi_monitor_th - pwdev_priv->rssi_monitor_hyst);
 	}
 
-        _rtw_memset(&data, 0, sizeof(data));
-
-        data.version = RSSI_MONITOR_EVT_VERSION;
-        data.cur_rssi = rssi;
-        _rtw_memcpy(data.BSSID, pcur_network->network.MacAddress, sizeof(mac_addr));
-
-        nla_append(skb, sizeof(data), &data);
-
-	rtw_cfg80211_vendor_event(skb, kflags);
-exit:
-	return;
-
-        #endif /* original code */
+	/*
+	 * If last event was NL80211_CQM_RSSI_THRESHOLD_EVENT_LOW and RSSI is
+	 * lower than the threshold, raise the signal HIGH event.
+	 */
+	if (pwdev_priv->rssi_monitor_state < 0 && rssi > pwdev_priv->rssi_monitor_th + pwdev_priv->rssi_monitor_hyst) {
+		cfg80211_cqm_rssi_notify(wdev->netdev, NL80211_CQM_RSSI_THRESHOLD_EVENT_HIGH, rssi, kflags);
+		pwdev_priv->rssi_monitor_state = 1;
+		//pr_info("rssi > %d\n", pwdev_priv->rssi_monitor_th + pwdev_priv->rssi_monitor_hyst);
+	}
 }
 #endif /* CONFIG_RTW_CFGVENDOR_RSSIMONITR */
 
@@ -1946,19 +1878,6 @@ static const struct wiphy_vendor_command rtw_vendor_cmds[] = {
 		.doit = rtw_cfgvendor_lstats_clear_info
 	},
 #endif /* CONFIG_RTW_CFGVENDOR_LLSTATS */
-#ifdef CONFIG_RTW_CFGVENDOR_RSSIMONITOR
-        {
-                {
-                        .vendor_id = OUI_GOOGLE,
-                        .subcmd = WIFI_SUBCMD_SET_RSSI_MONITOR
-                },
-                .flags = WIPHY_VENDOR_CMD_NEED_WDEV | WIPHY_VENDOR_CMD_NEED_NETDEV,
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5, 3, 0))
-		.policy = VENDOR_CMD_RAW_DATA,
-#endif
-                .doit = rtw_cfgvendor_set_rssi_monitor
-        },
-#endif /* CONFIG_RTW_CFGVENDOR_RSSIMONITOR */
 #ifdef CONFIG_RTW_CFGVENDOR_WIFI_LOGGER
 	{
 		{
From b88851a02ec3fe58118dc19fb6f639036491484b Mon Sep 17 00:00:00 2001
From: Ondrej Jirman <megi@xff.cz>
Date: Tue, 18 Jul 2023 18:53:01 +0200
Subject: [PATCH] 8723cs: Fix symbol conflicts with rtw88 driver

Signed-off-by: Ondrej Jirman <megi@xff.cz>
---
 drivers/staging/rtl8723cs/hal/hal_com.c                 | 2 +-
 drivers/staging/rtl8723cs/include/hal_com.h             | 2 +-
 drivers/staging/rtl8723cs/os_dep/linux/ioctl_cfg80211.c | 2 +-
 drivers/staging/rtl8723cs/os_dep/linux/wifi_regd.c      | 2 +-
 drivers/staging/rtl8723cs/os_dep/linux/wifi_regd.h      | 2 +-
 5 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/drivers/staging/rtl8723cs/hal/hal_com.c b/drivers/staging/rtl8723cs/hal/hal_com.c
index a0f15958a7784f..94728558b50ad8 100644
--- a/drivers/staging/rtl8723cs/hal/hal_com.c
+++ b/drivers/staging/rtl8723cs/hal/hal_com.c
@@ -2318,7 +2318,7 @@ u32 rtw_sec_read_cam(_adapter *adapter, u8 addr)
 	return rdata;
 }
 
-void rtw_sec_write_cam(_adapter *adapter, u8 addr, u32 wdata)
+static void rtw_sec_write_cam(_adapter *adapter, u8 addr, u32 wdata)
 {
 	_mutex *mutex = &adapter_to_dvobj(adapter)->cam_ctl.sec_cam_access_mutex;
 	u32 cnt = 0;
diff --git a/drivers/staging/rtl8723cs/include/hal_com.h b/drivers/staging/rtl8723cs/include/hal_com.h
index dcafbafd8b1bba..ea3b94fce7b19b 100644
--- a/drivers/staging/rtl8723cs/include/hal_com.h
+++ b/drivers/staging/rtl8723cs/include/hal_com.h
@@ -386,7 +386,7 @@ void rtw_hal_update_sta_ra_info(PADAPTER padapter, struct sta_info *psta);
 
 /* access HW only */
 u32 rtw_sec_read_cam(_adapter *adapter, u8 addr);
-void rtw_sec_write_cam(_adapter *adapter, u8 addr, u32 wdata);
+//void rtw_sec_write_cam(_adapter *adapter, u8 addr, u32 wdata);
 void rtw_sec_read_cam_ent(_adapter *adapter, u8 id, u8 *ctrl, u8 *mac, u8 *key);
 void rtw_sec_write_cam_ent(_adapter *adapter, u8 id, u16 ctrl, u8 *mac, u8 *key);
 void rtw_sec_clr_cam_ent(_adapter *adapter, u8 id);
diff --git a/drivers/staging/rtl8723cs/os_dep/linux/ioctl_cfg80211.c b/drivers/staging/rtl8723cs/os_dep/linux/ioctl_cfg80211.c
index 7eea58711252d6..e170700f3ae018 100644
--- a/drivers/staging/rtl8723cs/os_dep/linux/ioctl_cfg80211.c
+++ b/drivers/staging/rtl8723cs/os_dep/linux/ioctl_cfg80211.c
@@ -10531,7 +10531,7 @@ int rtw_wiphy_register(struct wiphy *wiphy)
 	rtw_cfgvendor_attach(wiphy);
 #endif
 
-	rtw_regd_init(wiphy);
+	rtw_regd_init_8723cs(wiphy);
 
 	return wiphy_register(wiphy);
 }
diff --git a/drivers/staging/rtl8723cs/os_dep/linux/wifi_regd.c b/drivers/staging/rtl8723cs/os_dep/linux/wifi_regd.c
index b4b0bcd5114d5b..bad1545640e3d2 100644
--- a/drivers/staging/rtl8723cs/os_dep/linux/wifi_regd.c
+++ b/drivers/staging/rtl8723cs/os_dep/linux/wifi_regd.c
@@ -389,7 +389,7 @@ static int rtw_reg_notifier_return(struct wiphy *wiphy, struct regulatory_reques
 }
 #endif
 
-int rtw_regd_init(struct wiphy *wiphy)
+int rtw_regd_init_8723cs(struct wiphy *wiphy)
 {
 #if (LINUX_VERSION_CODE < KERNEL_VERSION(3, 9, 0))
 	wiphy->reg_notifier = rtw_reg_notifier_return;
diff --git a/drivers/staging/rtl8723cs/os_dep/linux/wifi_regd.h b/drivers/staging/rtl8723cs/os_dep/linux/wifi_regd.h
index 4e147fc51dbc14..b9f6d0d7b4ef7b 100644
--- a/drivers/staging/rtl8723cs/os_dep/linux/wifi_regd.h
+++ b/drivers/staging/rtl8723cs/os_dep/linux/wifi_regd.h
@@ -22,6 +22,6 @@ struct _RT_CHANNEL_INFO;
 u8 rtw_os_init_channel_set(_adapter *padapter, struct _RT_CHANNEL_INFO *channel_set);
 s16 rtw_os_get_total_txpwr_regd_lmt_mbm(_adapter *adapter, u8 cch, enum channel_width bw);
 #endif
-int rtw_regd_init(struct wiphy *wiphy);
+int rtw_regd_init_8723cs(struct wiphy *wiphy);
 
 #endif /* __WIFI_REGD_H__ */
